%!PS-Adobe-2.0
%%Title: Skeleton for typesetting in PostScript.
%%Creator: Neale Pickett <neale@lanl.gov>
%%CreationDate: Thu Nov 22 15:27:53 MST 1998
%% Time-stamp: <2002-10-22 09:34:13 neale>
%%EndComments

/FontSize 12 def

/RegFont /Times-Roman def
/BoldFont /Times-Bold def
/ItalFont /Times-Italic def

/RegFSet RegFont findfont FontSize scalefont def
/BoldFSet BoldFont findfont FontSize scalefont def
/HeadFSet BoldFont findfont FontSize 1.1 mul scalefont def
/ItalFSet ItalFont findfont FontSize scalefont def

/SetRegFont { RegFSet setfont } def
/SetBoldFont { BoldFSet setfont } def
/SetHeadFont { HeadFSet setfont } def
/SetItalFont { ItalFSet setfont } def

/LM 50 def
/BM 50 def
/RM 580 LM sub def
/TM 760 BM sub def

/indentLevel 30 def

% Re-set the margins
/reset_margins {
  /lm LM def
  /rm RM def
} def  

reset_margins

% Move down just a little
/down {
  reset_margins
  lm indentation add currentpoint exch pop
  FontSize 3 div sub
  moveto
} def

% Move to the next line
/next {
  reset_margins
  lm indentation add currentpoint exch pop % LM Y
  FontSize 1.1 mul sub			% LM Y'
  moveto
  currentpoint exch pop
  BM lt {
    showpage
    LM TM moveto
  } {} ifelse
} def

% Move to the previous line
/prev {
  lm indentation add currentpoint exch pop % LM Y
  FontSize 1.1 mul add			% LM Y'
  moveto
} def

% Re-align the indentation
/align {
  lm indentation add currentpoint exch pop moveto
} def

% Indent once
/indentation 0 def
/indent {
  /indentation indentation indentLevel add def
  align
} def

% Deindent
/deindent {
  /indentation indentation indentLevel sub def
  align
} def

% Show left justified
/lshow {
  gsave
    % Set the left margin
    dup
    stringwidth pop
    LM add
    /lm exch def
  
    currentpoint exch pop		% (str) Y
    LM exch				% (str) x Y
    moveto show
  grestore
} def

% Show centered
/cshow {
  gsave
    dup					% (str) (str)
    stringwidth pop			% (str) x
    2 div				% (str) x/2
    RM LM sub 2 div			% (str) x/2 RM/2
    exch sub LM add			% (str) x'
    currentpoint exch pop		% (str) x' Y
    moveto show
  grestore
} def

% Show right justified
/rshow {
  gsave
    dup					% (str) (str)
    stringwidth pop			% (str) x

    % set the right margin
    dup
    RM exch sub padwidth sub
    /rm exch def

    RM exch sub				% (str) x'
    currentpoint exch pop		% (str) x' Y
    moveto show
  grestore
} def

% Show in a bold font
/bshow {
  SetBoldFont
  show
  SetRegFont
} def

% Show in a italics font
/ishow {
  SetItalFont
  show
  SetRegFont
} def

% Special parsing stuff; returns true if it's a printing character
/parse_special {
  /word exch def
  (<b>) word eq {
    SetBoldFont
    false
  } {
    (<i>) word eq {
      SetItalFont
      false
    } {
      (<r>) word eq {
	SetRegFont
	false
      } {
	true
      } ifelse
    } ifelse
  } ifelse
} def

% I totally stole this out of the blue book.  But I changed it a lot, so
% you might not recognize it if not for the name.
/wordbreak ( ) def
/BreakIntoLines  {
  /proc exch def
  /linelength exch def
  /textstring exch def
  /curwidth exch def

  /breakwidth wordbreak stringwidth pop def
  /lastwordbreak 0 def
  
  /startchar 0 def
  /restoftext textstring def

  SetRegFont
  {
    restoftext wordbreak search

    {
      /done false def
    } {
      () exch
      wordbreak exch
      /done true def
    } ifelse

    /nextword exch def pop
    /restoftext exch def

    nextword parse_special {
      /wordwidth nextword stringwidth pop def
      curwidth wordwidth add linelength gt
      {
	% This word should go on the next line
	proc
	/curwidth exch def
      } if
      
      /curwidth curwidth wordwidth add
      breakwidth add def
      nextword show
      wordbreak show
      
      /lastwordbreak lastwordbreak
      nextword length add 1 add def

      done {
	exit
      } {
      } ifelse
    } if
  } loop
  /lastchar textstring length def
  textstring startchar lastchar startchar sub
  getinterval proc
} def

% Show some text, and word-wrap it if necessary, then move to the next line
/wshow {
  0 exch
  /x currentpoint pop def
  rm x sub				% Line length
  {
    next
    x currentpoint exch pop moveto
    0
  }
  BreakIntoLines
} def

% Show indented, wrapped text
/iwshow {
  indentLevel exch
  /x currentpoint pop def
  rm x sub
  indentLevel 0 rmoveto
  {
    next
    x currentpoint exch pop moveto
    0
  }
  BreakIntoLines
} def

% Show inverse-indented, wrapped text
/iiwshow {
  indentLevel neg exch
  /x currentpoint pop indentLevel add def
  rm x sub
  {
    next
    x currentpoint exch pop moveto
    0
  }
  BreakIntoLines
  indentLevel neg 0 rmoveto
} def


LM TM moveto
SetRegFont

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Content goes here ;-)



showpage